// -------------------------------------------------------------
//
// File Name: hdlsrc/chorus/chorus.v
// Created: 2024-11-09 21:54:00
//
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
//
//
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.4
// Target subsystem base rate: 0.4
//
//
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.4
// -- -------------------------------------------------------------
//
//
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        0.4
// -- -------------------------------------------------------------
//
// -------------------------------------------------------------


// -------------------------------------------------------------
//
// Module: chorus
// Source Path: chorus
// Hierarchy Level: 0
// Model version: 1.14
//
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module chorus
          (clk,
           reset_n,
           clk_enable,
           In1,
           In2,
           ce_out,
           Out1);


  input   clk;
  input   reset_n;
  input   clk_enable;
  input   [15:0] In1;  // uint16
  input   [15:0] In2;  // uint16
  output  ce_out;
  output  [15:0] Out1;  // uint16


  wire enb;
  wire [15:0] ctrlSat;  // uint16
  reg [15:0] Delay1_reg [0:127];  // ufix16 [128]
  reg [15:0] Delay1_reg_next [0:127];  // ufix16 [128]
  reg [15:0] delayTapWire [0:128];  // uint16 [129]
  wire [15:0] Delay1_out1;  // uint16
  wire [31:0] Gain1_out1;  // ufix32_En16
  wire [31:0] Gain2_out1;  // ufix32_En16
  wire [31:0] Sum1_add_cast;  // ufix32
  wire [31:0] Sum1_add_cast_1;  // ufix32
  wire [31:0] Sum1_add_temp;  // ufix32
  wire [15:0] Sum1_out1;  // uint16
  reg signed [31:0] Delay1_t_0_0;  // int32
  reg signed [31:0] Delay1_t_1;  // int32
  reg signed [31:0] Delay1_t_0_1;  // int32
  reg signed [31:0] Delay1_t_1_0;  // int32


  assign ctrlSat = (In2 > 16'b0000000010000000 ? 16'b0000000010000000 :
              In2);



  assign enb = clk_enable;

  always @(posedge clk or negedge reset_n)
    begin : Delay1_process
      if (reset_n == 1'b0) begin
        for(Delay1_t_1_0 = 32'sd0; Delay1_t_1_0 <= 32'sd127; Delay1_t_1_0 = Delay1_t_1_0 + 32'sd1) begin
          Delay1_reg[Delay1_t_1_0] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay1_t_0_1 = 32'sd0; Delay1_t_0_1 <= 32'sd127; Delay1_t_0_1 = Delay1_t_0_1 + 32'sd1) begin
            Delay1_reg[Delay1_t_0_1] <= Delay1_reg_next[Delay1_t_0_1];
          end
        end
      end
    end

  always @* begin
    delayTapWire[0] = In1;

    for(Delay1_t_0_0 = 32'sd0; Delay1_t_0_0 <= 32'sd127; Delay1_t_0_0 = Delay1_t_0_0 + 32'sd1) begin
      delayTapWire[Delay1_t_0_0 + 32'sd1] = Delay1_reg[Delay1_t_0_0];
    end

    Delay1_reg_next[0] = In1;

    for(Delay1_t_1 = 32'sd0; Delay1_t_1 <= 32'sd126; Delay1_t_1 = Delay1_t_1 + 32'sd1) begin
      Delay1_reg_next[Delay1_t_1 + 32'sd1] = Delay1_reg[Delay1_t_1];
    end

  end



  assign Delay1_out1 = (ctrlSat == 16'b0000000000000000 ? delayTapWire[0] :
              (ctrlSat == 16'b0000000000000001 ? delayTapWire[1] :
              (ctrlSat == 16'b0000000000000010 ? delayTapWire[2] :
              (ctrlSat == 16'b0000000000000011 ? delayTapWire[3] :
              (ctrlSat == 16'b0000000000000100 ? delayTapWire[4] :
              (ctrlSat == 16'b0000000000000101 ? delayTapWire[5] :
              (ctrlSat == 16'b0000000000000110 ? delayTapWire[6] :
              (ctrlSat == 16'b0000000000000111 ? delayTapWire[7] :
              (ctrlSat == 16'b0000000000001000 ? delayTapWire[8] :
              (ctrlSat == 16'b0000000000001001 ? delayTapWire[9] :
              (ctrlSat == 16'b0000000000001010 ? delayTapWire[10] :
              (ctrlSat == 16'b0000000000001011 ? delayTapWire[11] :
              (ctrlSat == 16'b0000000000001100 ? delayTapWire[12] :
              (ctrlSat == 16'b0000000000001101 ? delayTapWire[13] :
              (ctrlSat == 16'b0000000000001110 ? delayTapWire[14] :
              (ctrlSat == 16'b0000000000001111 ? delayTapWire[15] :
              (ctrlSat == 16'b0000000000010000 ? delayTapWire[16] :
              (ctrlSat == 16'b0000000000010001 ? delayTapWire[17] :
              (ctrlSat == 16'b0000000000010010 ? delayTapWire[18] :
              (ctrlSat == 16'b0000000000010011 ? delayTapWire[19] :
              (ctrlSat == 16'b0000000000010100 ? delayTapWire[20] :
              (ctrlSat == 16'b0000000000010101 ? delayTapWire[21] :
              (ctrlSat == 16'b0000000000010110 ? delayTapWire[22] :
              (ctrlSat == 16'b0000000000010111 ? delayTapWire[23] :
              (ctrlSat == 16'b0000000000011000 ? delayTapWire[24] :
              (ctrlSat == 16'b0000000000011001 ? delayTapWire[25] :
              (ctrlSat == 16'b0000000000011010 ? delayTapWire[26] :
              (ctrlSat == 16'b0000000000011011 ? delayTapWire[27] :
              (ctrlSat == 16'b0000000000011100 ? delayTapWire[28] :
              (ctrlSat == 16'b0000000000011101 ? delayTapWire[29] :
              (ctrlSat == 16'b0000000000011110 ? delayTapWire[30] :
              (ctrlSat == 16'b0000000000011111 ? delayTapWire[31] :
              (ctrlSat == 16'b0000000000100000 ? delayTapWire[32] :
              (ctrlSat == 16'b0000000000100001 ? delayTapWire[33] :
              (ctrlSat == 16'b0000000000100010 ? delayTapWire[34] :
              (ctrlSat == 16'b0000000000100011 ? delayTapWire[35] :
              (ctrlSat == 16'b0000000000100100 ? delayTapWire[36] :
              (ctrlSat == 16'b0000000000100101 ? delayTapWire[37] :
              (ctrlSat == 16'b0000000000100110 ? delayTapWire[38] :
              (ctrlSat == 16'b0000000000100111 ? delayTapWire[39] :
              (ctrlSat == 16'b0000000000101000 ? delayTapWire[40] :
              (ctrlSat == 16'b0000000000101001 ? delayTapWire[41] :
              (ctrlSat == 16'b0000000000101010 ? delayTapWire[42] :
              (ctrlSat == 16'b0000000000101011 ? delayTapWire[43] :
              (ctrlSat == 16'b0000000000101100 ? delayTapWire[44] :
              (ctrlSat == 16'b0000000000101101 ? delayTapWire[45] :
              (ctrlSat == 16'b0000000000101110 ? delayTapWire[46] :
              (ctrlSat == 16'b0000000000101111 ? delayTapWire[47] :
              (ctrlSat == 16'b0000000000110000 ? delayTapWire[48] :
              (ctrlSat == 16'b0000000000110001 ? delayTapWire[49] :
              (ctrlSat == 16'b0000000000110010 ? delayTapWire[50] :
              (ctrlSat == 16'b0000000000110011 ? delayTapWire[51] :
              (ctrlSat == 16'b0000000000110100 ? delayTapWire[52] :
              (ctrlSat == 16'b0000000000110101 ? delayTapWire[53] :
              (ctrlSat == 16'b0000000000110110 ? delayTapWire[54] :
              (ctrlSat == 16'b0000000000110111 ? delayTapWire[55] :
              (ctrlSat == 16'b0000000000111000 ? delayTapWire[56] :
              (ctrlSat == 16'b0000000000111001 ? delayTapWire[57] :
              (ctrlSat == 16'b0000000000111010 ? delayTapWire[58] :
              (ctrlSat == 16'b0000000000111011 ? delayTapWire[59] :
              (ctrlSat == 16'b0000000000111100 ? delayTapWire[60] :
              (ctrlSat == 16'b0000000000111101 ? delayTapWire[61] :
              (ctrlSat == 16'b0000000000111110 ? delayTapWire[62] :
              (ctrlSat == 16'b0000000000111111 ? delayTapWire[63] :
              (ctrlSat == 16'b0000000001000000 ? delayTapWire[64] :
              (ctrlSat == 16'b0000000001000001 ? delayTapWire[65] :
              (ctrlSat == 16'b0000000001000010 ? delayTapWire[66] :
              (ctrlSat == 16'b0000000001000011 ? delayTapWire[67] :
              (ctrlSat == 16'b0000000001000100 ? delayTapWire[68] :
              (ctrlSat == 16'b0000000001000101 ? delayTapWire[69] :
              (ctrlSat == 16'b0000000001000110 ? delayTapWire[70] :
              (ctrlSat == 16'b0000000001000111 ? delayTapWire[71] :
              (ctrlSat == 16'b0000000001001000 ? delayTapWire[72] :
              (ctrlSat == 16'b0000000001001001 ? delayTapWire[73] :
              (ctrlSat == 16'b0000000001001010 ? delayTapWire[74] :
              (ctrlSat == 16'b0000000001001011 ? delayTapWire[75] :
              (ctrlSat == 16'b0000000001001100 ? delayTapWire[76] :
              (ctrlSat == 16'b0000000001001101 ? delayTapWire[77] :
              (ctrlSat == 16'b0000000001001110 ? delayTapWire[78] :
              (ctrlSat == 16'b0000000001001111 ? delayTapWire[79] :
              (ctrlSat == 16'b0000000001010000 ? delayTapWire[80] :
              (ctrlSat == 16'b0000000001010001 ? delayTapWire[81] :
              (ctrlSat == 16'b0000000001010010 ? delayTapWire[82] :
              (ctrlSat == 16'b0000000001010011 ? delayTapWire[83] :
              (ctrlSat == 16'b0000000001010100 ? delayTapWire[84] :
              (ctrlSat == 16'b0000000001010101 ? delayTapWire[85] :
              (ctrlSat == 16'b0000000001010110 ? delayTapWire[86] :
              (ctrlSat == 16'b0000000001010111 ? delayTapWire[87] :
              (ctrlSat == 16'b0000000001011000 ? delayTapWire[88] :
              (ctrlSat == 16'b0000000001011001 ? delayTapWire[89] :
              (ctrlSat == 16'b0000000001011010 ? delayTapWire[90] :
              (ctrlSat == 16'b0000000001011011 ? delayTapWire[91] :
              (ctrlSat == 16'b0000000001011100 ? delayTapWire[92] :
              (ctrlSat == 16'b0000000001011101 ? delayTapWire[93] :
              (ctrlSat == 16'b0000000001011110 ? delayTapWire[94] :
              (ctrlSat == 16'b0000000001011111 ? delayTapWire[95] :
              (ctrlSat == 16'b0000000001100000 ? delayTapWire[96] :
              (ctrlSat == 16'b0000000001100001 ? delayTapWire[97] :
              (ctrlSat == 16'b0000000001100010 ? delayTapWire[98] :
              (ctrlSat == 16'b0000000001100011 ? delayTapWire[99] :
              (ctrlSat == 16'b0000000001100100 ? delayTapWire[100] :
              (ctrlSat == 16'b0000000001100101 ? delayTapWire[101] :
              (ctrlSat == 16'b0000000001100110 ? delayTapWire[102] :
              (ctrlSat == 16'b0000000001100111 ? delayTapWire[103] :
              (ctrlSat == 16'b0000000001101000 ? delayTapWire[104] :
              (ctrlSat == 16'b0000000001101001 ? delayTapWire[105] :
              (ctrlSat == 16'b0000000001101010 ? delayTapWire[106] :
              (ctrlSat == 16'b0000000001101011 ? delayTapWire[107] :
              (ctrlSat == 16'b0000000001101100 ? delayTapWire[108] :
              (ctrlSat == 16'b0000000001101101 ? delayTapWire[109] :
              (ctrlSat == 16'b0000000001101110 ? delayTapWire[110] :
              (ctrlSat == 16'b0000000001101111 ? delayTapWire[111] :
              (ctrlSat == 16'b0000000001110000 ? delayTapWire[112] :
              (ctrlSat == 16'b0000000001110001 ? delayTapWire[113] :
              (ctrlSat == 16'b0000000001110010 ? delayTapWire[114] :
              (ctrlSat == 16'b0000000001110011 ? delayTapWire[115] :
              (ctrlSat == 16'b0000000001110100 ? delayTapWire[116] :
              (ctrlSat == 16'b0000000001110101 ? delayTapWire[117] :
              (ctrlSat == 16'b0000000001110110 ? delayTapWire[118] :
              (ctrlSat == 16'b0000000001110111 ? delayTapWire[119] :
              (ctrlSat == 16'b0000000001111000 ? delayTapWire[120] :
              (ctrlSat == 16'b0000000001111001 ? delayTapWire[121] :
              (ctrlSat == 16'b0000000001111010 ? delayTapWire[122] :
              (ctrlSat == 16'b0000000001111011 ? delayTapWire[123] :
              (ctrlSat == 16'b0000000001111100 ? delayTapWire[124] :
              (ctrlSat == 16'b0000000001111101 ? delayTapWire[125] :
              (ctrlSat == 16'b0000000001111110 ? delayTapWire[126] :
              (ctrlSat == 16'b0000000001111111 ? delayTapWire[127] :
              delayTapWire[128]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));



  assign Gain1_out1 = 16'b1011010011111110 * Delay1_out1;



  assign Gain2_out1 = 16'b1100110011001101 * In1;



  assign Sum1_add_cast = ({16'b0, Gain1_out1[31:16]}) + Gain1_out1[15];
  assign Sum1_add_cast_1 = ({16'b0, Gain2_out1[31:16]}) + Gain2_out1[15];
  assign Sum1_add_temp = Sum1_add_cast + Sum1_add_cast_1;
  assign Sum1_out1 = (Sum1_add_temp[31:16] != 16'b0000000000000000 ? 16'b1111111111111111 :
              Sum1_add_temp[15:0]);



  assign Out1 = Sum1_out1;

  assign ce_out = clk_enable;

endmodule  // chorus
